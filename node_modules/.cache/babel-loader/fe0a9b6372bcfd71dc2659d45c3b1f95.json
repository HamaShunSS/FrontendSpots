{"ast":null,"code":"import _classCallCheck from \"/Users/hamashunsuke/Desktop/EasyorHard/Frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hamashunsuke/Desktop/EasyorHard/Frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/hamashunsuke/Desktop/EasyorHard/Frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/hamashunsuke/Desktop/EasyorHard/Frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/hamashunsuke/Desktop/EasyorHard/Frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/hamashunsuke/Desktop/EasyorHard/Frontend/src/Components/Search/Search.js\";\nimport React, { Component } from 'react';\nimport CardList from '../CardList'; //child\n\nimport SearchBox from '../SearchBox'; //child\n\nimport Scroll from '../Scroll';\n\nvar Search =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Search, _React$Component);\n\n  function Search(props) {\n    var _this;\n\n    _classCallCheck(this, Search);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Search).call(this, props));\n\n    _this.onSearchChange = function (event) {\n      //whenever it gets changed\n      _this.setState({\n        searchfield: event.target.value\n      }); //update \"serachfiled is event.target.value\"\n\n    };\n\n    _this.state = {\n      professors: [],\n      searchfield: ''\n    };\n    return _this;\n  }\n\n  _createClass(Search, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch('https://jsonplaceholder.typicode.com/users') //made Ajax request, using the fetch API\n      .then(function (response) {\n        return response.json();\n      }) //got the response, which was \"promise\", so do \".then()\" --> anytime I use \"fetch\", use \"response.json()\" to convert \"Json\" to something we can use Javascript\n      .then(function (users) {\n        return _this2.setState({\n          professors: users\n        });\n      }); //     fetch('http://localhost:3000/prof',{ //fetch connects frontend with the server\n      //         method: 'get',\n      //         headers: {'Content-Type': 'application/json'},\n      //         body: JSON.stringify({ // Send email and password updated at \"onEmailChange\" and \"onPasswordChange\" to the database through JSON.stringify\n      //             id: this.state.professors.name\n      //         })\n      //         .then(response => response.json()) // Get response through json, and get data by \".then\"\n      //         .then(users => this.setState({professors: users}))\n      //\n      // })\n    }\n  }, {\n    key: \"render\",\n    // filterdProfs = () =>{\n    //     this.state.professors.filter(prof => {\n    //     console.log(prof);\n    //     return prof.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n    // })\n    // }\n    value: function render() {\n      var _this3 = this;\n\n      var filterdProfs = this.state.professors.filter(function (prof) {\n        console.log(prof); //\"filter\" is a function to go thorough array in \"robots from State\", having a parameter \"robot\"\n\n        return prof.name.toLowerCase().includes(_this3.state.searchfield.toLowerCase()); //return the \"robot\"'s name if it is included\"serachfield's strings, setting lowercase every words\n      });\n      return React.createElement(\"div\", {\n        className: \"measure\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"db fw6 lh-copy f2\",\n        htmlFor: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Easy or Hard\"), React.createElement(SearchBox, {\n        onSearchChange: this.onSearchChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), React.createElement(Scroll, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(CardList, {\n        professors: filterdProfs,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Search;\n}(React.Component);\n\nexport default Search;","map":{"version":3,"sources":["/Users/hamashunsuke/Desktop/EasyorHard/Frontend/src/Components/Search/Search.js"],"names":["React","Component","CardList","SearchBox","Scroll","Search","props","onSearchChange","event","setState","searchfield","target","value","state","professors","fetch","then","response","json","users","filterdProfs","filter","prof","console","log","name","toLowerCase","includes"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,aAArB,C,CAAoC;;AACpC,OAAOC,SAAP,MAAsB,cAAtB,C,CAAqC;;AACrC,OAAOC,MAAP,MAAmB,WAAnB;;IAEMC,M;;;;;AACF,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,gFAAMA,KAAN;;AADe,UAyBnBC,cAzBmB,GAyBF,UAACC,KAAD,EAAW;AAAE;AAC1B,YAAKC,QAAL,CAAc;AAACC,QAAAA,WAAW,EAAEF,KAAK,CAACG,MAAN,CAAaC;AAA3B,OAAd,EADwB,CACyB;;AACpD,KA3BkB;;AAEf,UAAKC,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE,EADH;AAETJ,MAAAA,WAAW,EAAE;AAFJ,KAAb;AAFe;AAMlB;;;;wCAEmB;AAAA;;AAChBK,MAAAA,KAAK,CAAC,4CAAD,CAAL,CAAoD;AAApD,OACKC,IADL,CACU,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,OADlB,EACuC;AADvC,OAEKF,IAFL,CAEU,UAAAG,KAAK;AAAA,eAAI,MAAI,CAACV,QAAL,CAAc;AAACK,UAAAA,UAAU,EAAEK;AAAb,SAAd,CAAJ;AAAA,OAFf,EADgB,CAKpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC;;;AAMD;AACA;AACA;AACA;AACA;AACA;6BAES;AAAA;;AACL,UAAMC,YAAY,GAAG,KAAKP,KAAL,CAAWC,UAAX,CAAsBO,MAAtB,CAA6B,UAAAC,IAAI,EAAI;AACtDC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EADsD,CAEtD;;AACA,eAAOA,IAAI,CAACG,IAAL,CAAUC,WAAV,GAAwBC,QAAxB,CAAiC,MAAI,CAACd,KAAL,CAAWH,WAAX,CAAuBgB,WAAvB,EAAjC,CAAP,CAHsD,CAItD;AACH,OALoB,CAArB;AAMA,aACI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,SAAS,EAAC,mBAAjB;AAAqC,QAAA,OAAO,EAAC,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,EAEI,oBAAC,SAAD;AAAW,QAAA,cAAc,EAAE,KAAKnB,cAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAU,QAAA,UAAU,EAAEa,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAHJ,CADJ;AASH;;;;EArDgBpB,KAAK,CAACC,S;;AAyD3B,eAAeI,MAAf","sourcesContent":["import React, { Component } from 'react';\nimport CardList from '../CardList'; //child\nimport SearchBox from '../SearchBox' //child\nimport Scroll from '../Scroll'\n\nclass Search extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            professors: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users') //made Ajax request, using the fetch API\n            .then(response => response.json()) //got the response, which was \"promise\", so do \".then()\" --> anytime I use \"fetch\", use \"response.json()\" to convert \"Json\" to something we can use Javascript\n            .then(users => this.setState({professors: users}));\n\n    //     fetch('http://localhost:3000/prof',{ //fetch connects frontend with the server\n    //         method: 'get',\n    //         headers: {'Content-Type': 'application/json'},\n    //         body: JSON.stringify({ // Send email and password updated at \"onEmailChange\" and \"onPasswordChange\" to the database through JSON.stringify\n    //             id: this.state.professors.name\n    //         })\n    //         .then(response => response.json()) // Get response through json, and get data by \".then\"\n    //         .then(users => this.setState({professors: users}))\n    //\n    // })\n    }\n\n    onSearchChange = (event) => { //whenever it gets changed\n        this.setState({searchfield: event.target.value}) //update \"serachfiled is event.target.value\"\n    }\n\n    // filterdProfs = () =>{\n    //     this.state.professors.filter(prof => {\n    //     console.log(prof);\n    //     return prof.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n    // })\n    // }\n\n    render() {\n        const filterdProfs = this.state.professors.filter(prof => {\n            console.log(prof);\n            //\"filter\" is a function to go thorough array in \"robots from State\", having a parameter \"robot\"\n            return prof.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n            //return the \"robot\"'s name if it is included\"serachfield's strings, setting lowercase every words\n        })\n        return (\n            <div className=\"measure\">\n                <label className=\"db fw6 lh-copy f2\" htmlFor=\"name\">Easy or Hard</label>\n                <SearchBox onSearchChange={this.onSearchChange}/>\n                <Scroll>\n                    <CardList professors={filterdProfs}/>\n                </Scroll>\n            </div>\n        );\n    }\n}\n\n\nexport default Search;"]},"metadata":{},"sourceType":"module"}